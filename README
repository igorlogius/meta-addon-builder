#!/bin/bash -x

# https://addons-server.readthedocs.io/en/latest/topics/api/v4_frozen/signing.html#v4-upload-version

# check if AMO is set 
[ -z ${AMO+x} ] && { echo >&2 "AMO environment variable not set"; exit 1; }

# check requirements
MISSING_REQ=0
for req in mktemp wget unzip zip grep cut date basename curl;do
	type $req >/dev/null 2>&1 || { echo >&2 "Missing dependency: $req"; MISSING_REQ=1; }
done
[ $MISSING_REQ -ne 0 ] && { echo "Aborting because of missing dependency"; exit 1; }

# addon/repo name
ID=$(basename "$AMO")

# create tmp storage
ZIPFILE=$(mktemp)
EXTRDIR=$(mktemp -d)

# REF https://docs.github.com/en/rest/repos/repos#get-a-repository
DEFAULT_BRANCH=$(curl -sL -H "Accept: application/vnd.github.v3+json"   "https://api.github.com/repos/igorlogius/$ID" -o- | grep -iPo '(?<="default_branch": ")(.*)(?=",)')

# download latest source
wget -q "https://github.com/igorlogius/$ID/archive/$DEFAULT_BRANCH.zip" -O $ZIPFILE

# extract without paths and README
unzip -j $ZIPFILE -d $EXTRDIR -x "*/README" "*/main.yml" "*/bug_report.md" "*/feature_request.md" "*example*" "*test*" $IGN

VERSION=$(grep '"version"' $EXTRDIR/manifest.json |cut -d'"' -f4);

# re-pack as (zip/xpi) without paths and extended file attributes 
XPI="$ID-$VERSION-$(date '+%F_%H-%M').zip" 
zip -X -j $XPI $EXTRDIR/*

# remove tmp storage
rm -f $EXTRDIR/* && rmdir $EXTRDIR/

# show content of xpi
#unzip -l $XPI

# conditional export of artifact name for github release workflow 
[ -z ${GITHUB_ENV+x} ] || { echo "ARTNAME=$XPI" >> $GITHUB_ENV; }

# # # 

[ -z ${ISSUER+x} ] && { echo "AMO ISSUER not set, not uploading to AMO"; exit 1; }
[ -z ${SECRET+x} ] && { echo "AMO SECRET not set, not uploading to AMO"; exit 1; }

# removes padding ===
b64url_encode() { 
    cat /dev/stdin | base64 -w0 | tr -d '=' | tr '/+' '_-'
}

hmacsha256_sign() {
	cat /dev/stdin | openssl dgst -binary -sha256 -hmac "${SECRET}"
}

header=$(echo -n '{"alg":"HS256","typ":"JWT"}' | b64url_encode)
IAT=$(date +%s)
JTI=$((IAT+RANDOM))
EXP=$((IAT+30))
payload=$(echo -n "{\"iss\":\"${ISSUER}\",\"iat\":${IAT},\"jti\":\"${JTI}\",\"exp\":$EXP}" | b64url_encode)


header_payload=$(echo -n "${header}.${payload}")
signature=$(echo -n "${header_payload}" | hmacsha256_sign | b64url_encode)

AUTH_TOKEN="${header_payload}.${signature}"

# upload to AMO
#curl --url "https://addons.mozilla.org/api/v4/addons/" \
#     -g \
#     -X POST \
#     -F "upload=@$XPI" \
#     -F "version=$VERSION" \
#     -H "Authorization: JWT $AUTH_TOKEN"

GUID=$(curl -sL https://addons.mozilla.org/api/v4/addons/addon/$ID/ -o- | grep -iPo '(?<="guid":"{)([a-z0-9-]*)(?=}",)' )

# upload a new version
STATUS=$(curl -sL --url "https://addons.mozilla.org/api/v4/addons/{$GUID}/versions/$VERSION/" \
    -g \
    -XPUT \
    --form "upload=@$XPI" \
    -H "Authorization: JWT $AUTH_TOKEN" \
    -o /dev/null \
    -w "%{http_code}"
)

if [ $STATUS -ne 202 ];then
    echo "Addon not Accepted, Status != 202"
    exit 1;
fi
 

